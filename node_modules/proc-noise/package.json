{
  "_args": [
    [
      {
        "raw": "proc-noise",
        "scope": null,
        "escapedName": "proc-noise",
        "name": "proc-noise",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "C:\\Users\\jamie\\Desktop\\Project"
    ]
  ],
  "_from": "proc-noise@latest",
  "_id": "proc-noise@0.0.1",
  "_inCache": true,
  "_location": "/proc-noise",
  "_npmUser": {
    "name": "cyle",
    "email": "cylegage@gmail.com"
  },
  "_npmVersion": "1.3.14",
  "_phantomChildren": {},
  "_requested": {
    "raw": "proc-noise",
    "scope": null,
    "escapedName": "proc-noise",
    "name": "proc-noise",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/proc-noise/-/proc-noise-0.0.1.tgz",
  "_shasum": "fd38808059d51a437d3862293c2c9f0fd4d67d52",
  "_shrinkwrap": null,
  "_spec": "proc-noise",
  "_where": "C:\\Users\\jamie\\Desktop\\Project",
  "author": {
    "name": "Cyle Gage",
    "email": "cylegage@gmail.com",
    "url": "http://cylegage.com/"
  },
  "bugs": {
    "url": "http://github.com/cyle/proc-noise-node/issues",
    "email": "cylegage@gmail.com"
  },
  "dependencies": {
    "alea": "0.0.9"
  },
  "description": "Processing's implementation of Perlin noise.",
  "devDependencies": {},
  "directories": {
    "test": "test"
  },
  "dist": {
    "shasum": "fd38808059d51a437d3862293c2c9f0fd4d67d52",
    "tarball": "https://registry.npmjs.org/proc-noise/-/proc-noise-0.0.1.tgz"
  },
  "engines": {
    "node": ">= 0.10.0"
  },
  "homepage": "https://github.com/cyle/proc-noise-node",
  "keywords": [
    "perlin noise",
    "perlin",
    "noise",
    "simplex"
  ],
  "license": "BSD-2-Clause",
  "main": "./lib/proc-noise",
  "maintainers": [
    {
      "name": "cyle",
      "email": "cylegage@gmail.com"
    }
  ],
  "name": "proc-noise",
  "optionalDependencies": {},
  "readme": "# Processing's Noise() Functionality for Node.js\n\n## lol wat?\n\nThis is basically a one-to-one port of [Processing's noise() functionality](http://processing.org/reference/noise_.html) from Java to Javascript for Node.js. Since Javascript's `Math.random()` has no seeding capability, I've used the wonderful [Alea](https://github.com/coverslide/node-alea) pseudo-random number generator instead.\n\n## Usage\n\nUsing it is pretty simple:\n\n    var PerlinGenerator = require(\"proc-noise\");\n\tvar Perlin = new PerlinGenerator(); // seeds itself if no seed is given as an argument\n\tconsole.log( Perlin.noise( 817.2 ) ); // one dimensional\n\tconsole.log( Perlin.noise( 9192, 818.53 ) ); // two dimensional\n\tconsole.log( Perlin.noise( 5, 7, 9.22 ) ); // three dimensional\n\nInitializing the module returns a randomly-seeded Perlin Noise object. If you want, you can pass it a seed either when initializing it with `new`, or later using the `noiseSeed(seed)` method.\n\nThe generated `Perlin` object has four methods: `noise(x, y, z)`, `noiseSeed(seed)`, `noiseReseed()`, and `noiseDetail(lod, falloff)`.\n\nThe `noise(x, y, z)` function can take one, two, or three arguments, depending on how many dimensions you want to use. This function will always return a number between 0.0 and 1.0.\n\nBy default, the Perlin object seeds itself using a random Alea seed, but you can set your own seed using `noiseSeed(seed)`. This obviously resets the generator with new values.\n\nTo reseed the Perlin object with a new random seed, just use `noiseReseed()`. This obviously resets the generator with new values.\n\nTo change the level of detail and falloff of the Perlin object, use `noiseDetail(lod, falloff)`. The `falloff` argument is optional. By default, the level of detail is 4 octaves, and the amplitude falloff is 0.5. To be totally honest, I don't fully understand the math of this, but it's here if you want to use it.\n\n## Examples\n\nTwo examples are provided in the `test/` directory. To run them, use `node`, of course. `test.js` just prints out some noise values. `visual.js` is more complicated, providing a webpage for you to see the noise function in action in two dimensions via the often-seen randomly-generated noise cloud.\n\n## The Original\n\nThe original code from Processing is deep in [here](https://github.com/processing/processing/blob/master/core/src/processing/core/PApplet.java). It has plenty of comments if you're interested in learning more about it.\n\n## Why?\n\nI tried using the [simplex-noise](https://github.com/jwagner/simplex-noise.js) module and it gave me very different results than what I was used to in Processing. I'm not sure why, so I just ported the Processing noise() implementation over as the quickest solution. That's probably a silly way to go about it, but whatever, lol.",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/cyle/proc-noise-node.git"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "version": "0.0.1"
}
